window.SIDEBAR_ITEMS = {"constant":[["ETHEREUM_XCM_TRACING_STORAGE_KEY","The EthereumXcmTracingStatus storage key."],["MAX_ETHEREUM_XCM_INPUT_SIZE","Max. allowed size of 65_536 bytes."]],"enum":[["EthereumXcmFee","Xcm transact’s Ethereum transaction configurable fee."],["EthereumXcmTracingStatus","The current EthereumXcmTransaction trace status."],["EthereumXcmTransaction","Xcm transact’s Ethereum transaction."],["HrmpAvailableCalls",""],["UtilityAvailableCalls",""]],"fn":[["rs_id","Value for `r` and `s` for the invalid signature included in Xcm transact’s Ethereum transaction."]],"struct":[["AbsoluteAndRelativeReserve","This struct offers uses RelativeReserveProvider to output relative views of multilocations However, additionally accepts a MultiLocation that aims at representing the chain part (parent: 1, Parachain(paraId)) of the absolute representation of our chain. If a token reserve matches against this absolute view, we return  Some(MultiLocation::here()) This helps users by preventing errors when they try to transfer a token through xtokens to our chain (either inserting the relative or the absolute value)."],["Account20Hash",""],["AccountIdToMultiLocation","Instructs how to convert a 20 byte accountId into a MultiLocation"],["AllowTopLevelPaidExecutionDescendOriginFirst","Barrier allowing a top level paid message with DescendOrigin instruction first"],["AsAssetType","Converter struct implementing `AssetIdConversion` converting a numeric asset ID (must be `TryFrom/TryInto<u128>`) into a MultiLocation Value and vice versa through an intermediate generic type AssetType. The trait bounds enforce is that the AssetTypeGetter trait is also implemented for AssetIdInfoGetter"],["EthereumXcmTransactionV1",""],["EthereumXcmTransactionV2",""],["FirstAssetTrader",""],["ManualEthereumXcmFee","Manually sets a gas fee."],["SignedToAccountId20",""],["XcmFeesToAccount","XCM fee depositor to which we implement the TakeRevenue trait It receives a fungibles::Mutate implemented argument, a matcher to convert MultiAsset into AssetId and amount, and the fee receiver account"]],"trait":[["AccountIdToCurrencyId","This trait ensure we can convert AccountIds to CurrencyIds We will require Runtime to have this trait implemented"],["AssetTypeGetter","Defines the trait to obtain a generic AssetType from a generic AssetId and vice versa"],["EnsureProxy","Ensure that a proxy between `delegator` and `delegatee` exists in order to deny or grant permission to do xcm-transact to `transact_through_proxy`."],["FilterMaxAssetFee","Filters max fee for a given multiasset. It takes self (a multiasset) and runs contains in the argument multiasset Can be amalgamated into tuples. If any item returns `true`, it short-circuits, else `false` is returned."],["HrmpEncodeCall",""],["PauseXcmExecution","Pause and resume execution of XCM"],["UnitsToWeightRatio",""],["UtilityEncodeCall",""],["XcmToEthereum",""],["XcmTransact",""]],"type":[["XcmV2Weight",""]]};