window.SIDEBAR_ITEMS = {"enum":[["PrecompileKind",""]],"struct":[["AcceptDelegateCall","Precompile can be called using DELEGATECALL/CALLCODE."],["AddressU64",""],["CallableByContract",""],["CallableByPrecompile","Precompiles are allowed to call this precompile."],["ForAllSelectors",""],["OnlyFrom",""],["PrecompileAt","Wraps a stateless precompile: a type implementing the `Precompile` trait. Type parameters allow to define:"],["PrecompileCheckSummary",""],["PrecompileSetBuilder","Wraps a tuple of `PrecompileSetFragment` to make a real `PrecompileSet`."],["PrecompileSetStartingWith","Wraps an inner PrecompileSet with all its addresses starting with a common prefix. Type parameters allow to define:"],["PrecompilesInRangeInclusive","Wraps a precompileset fragment into a range, and will skip processing it if the address is out of the range."],["RestrictiveHandle",""],["RevertPrecompile","Make a precompile that always revert. Can be useful when writing tests."],["SubcallWithMaxNesting","Precompile is able to do subcalls with provided nesting limit."]],"trait":[["PrecompileChecks","Trait representing checks that can be made on a precompile call. Types implementing this trait are made to be chained in a tuple."],["PrecompileSetFragment","A fragment of a PrecompileSet. Should be implemented as is it was a PrecompileSet containing only the precompile(set) it wraps. They can be combined into a real PrecompileSet using `PrecompileSetBuilder`."],["SelectorFilter",""]]};